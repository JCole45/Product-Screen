[{"/Users/johncoleman/Documents/Projects/React-Redux/product_page/src/index.js":"1","/Users/johncoleman/Documents/Projects/React-Redux/product_page/src/App.js":"2","/Users/johncoleman/Documents/Projects/React-Redux/product_page/src/reportWebVitals.js":"3","/Users/johncoleman/Documents/Projects/React-Redux/product_page/src/screens/ProductDetails.js":"4","/Users/johncoleman/Documents/Projects/React-Redux/product_page/src/components/Rating.js":"5","/Users/johncoleman/Documents/Projects/React-Redux/product_page/src/components/Header.js":"6","/Users/johncoleman/Documents/Projects/React-Redux/product_page/src/screens/CartScreen.js":"7","/Users/johncoleman/Documents/Projects/React-Redux/product_page/src/store.js":"8","/Users/johncoleman/Documents/Projects/React-Redux/product_page/src/actions/productAction.js":"9","/Users/johncoleman/Documents/Projects/React-Redux/product_page/src/constants/productContants.js":"10","/Users/johncoleman/Documents/Projects/React-Redux/product_page/src/components/Message.js":"11","/Users/johncoleman/Documents/Projects/React-Redux/product_page/src/reducers/productReducers.js":"12","/Users/johncoleman/Documents/Projects/React-Redux/product_page/src/images.js":"13","/Users/johncoleman/Documents/Projects/React-Redux/product_page/src/screens/EditScreen.js":"14","/Users/johncoleman/Documents/Projects/React-Redux/product_page/src/screens/CheckoutScreen.js":"15"},{"size":623,"mtime":1611154708595,"results":"16","hashOfConfig":"17"},{"size":827,"mtime":1610754033294,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1610623296049,"results":"19","hashOfConfig":"17"},{"size":15237,"mtime":1611172620964,"results":"20","hashOfConfig":"17"},{"size":1313,"mtime":1610630146600,"results":"21","hashOfConfig":"17"},{"size":6468,"mtime":1610759049704,"results":"22","hashOfConfig":"17"},{"size":15011,"mtime":1611172654097,"results":"23","hashOfConfig":"17"},{"size":652,"mtime":1611154134390,"results":"24","hashOfConfig":"17"},{"size":964,"mtime":1610757392783,"results":"25","hashOfConfig":"17"},{"size":200,"mtime":1610733452091,"results":"26","hashOfConfig":"17"},{"size":276,"mtime":1610707932897,"results":"27","hashOfConfig":"17"},{"size":1978,"mtime":1611327009050,"results":"28","hashOfConfig":"17"},{"size":564,"mtime":1610718290004,"results":"29","hashOfConfig":"17"},{"size":14799,"mtime":1610752938778,"results":"30","hashOfConfig":"17"},{"size":10659,"mtime":1610758741258,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1ohkj35",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"34"},"/Users/johncoleman/Documents/Projects/React-Redux/product_page/src/index.js",[],["66","67"],"/Users/johncoleman/Documents/Projects/React-Redux/product_page/src/App.js",[],"/Users/johncoleman/Documents/Projects/React-Redux/product_page/src/reportWebVitals.js",[],"/Users/johncoleman/Documents/Projects/React-Redux/product_page/src/screens/ProductDetails.js",["68","69","70","71"],"import React, { useState, useEffect } from 'react'\nimport Rating from '../components/Rating'\nimport { Row, Col, Image, ListGroup, Card, Button, Carousel } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { addProductToCart, editProductInCart } from '../actions/productAction'\nimport Message from '../components/Message'\nimport { Drawer } from 'antd';\nimport { v4 as uuidv4 } from 'uuid';\nimport item_images from '../images'\n\n\n\n\nconst ProductDetails = ({ history, location, match }) => {\n    const dispatch = useDispatch()\n    \n    const [name, setName] = useState('Harbor Fleece Shep Shirt')\n    const [price, setPrice] = useState(138)\n    const [qty, setQty] = useState(1)\n    const [color, setColor] = useState()\n    const [size, setSize] = useState()\n    const [visible, setVisible] = useState(false);\n    const [errorMessage, setErrorMessage] = useState({ error: false, message: '' })\n    const [successMessage, setSuccessMessage] = useState({ success: false, message: '' })\n    const [showCartItems, setShowCartItems] = useState(false)\n    \n    \n    const cart = useSelector(state => state.addToCart)\n    const { cartItems } = cart\n    \n    const setEditInfo = (item) => {\n        setName(item.name)\n        setPrice(item.price)\n        setQty(item.quantity)\n        setColor(item.color)\n        setSize(item.size)\n    }\n    \n    const colors = ['red', 'yellow', 'green', 'blue', 'white']\n    const sizes = ['XS', 'S', 'M', 'L', 'XL', 'XXL']\n    \n    const onClose = () => {\n        setVisible(false);\n    };\n    \n    const showDrawer = () => {\n        if (!color) {\n            setErrorMessage({ error: true, message: 'Select color of item' })\n            onClose()\n        }\n        if (!size) {\n            setErrorMessage({ error: true, message: 'Select size of item' })\n            onClose()\n        }\n        if (qty <= 0) {\n            setErrorMessage({ error: true, message: 'Item quantity cannot be 0' })\n            onClose()\n        }\n        if (color && size && qty > 0) {\n            setVisible(true);\n            setErrorMessage({ error: false, message: '' })\n        }\n    };\n    const hideDrawer = () => {\n        setVisible(false)\n    }\n    \n    const handleInputField = (e) => {\n        let code = /^[0-9]*$/i\n        if (e.target.value.match(code)) {\n            setQty(Number(e.target.value))\n        }\n    \n    }\n    \n    const handleIncrease = (e) => {\n        setQty(qty + 1)\n    }\n    \n    const handleDecrease = (e) => {\n        if (qty > 1) {\n            setQty(qty - 1)\n        }\n    }\n    \n    const handleColor = (selected_color) => {\n        setColor(selected_color)\n        setErrorMessage({ error: false, message: '' })\n    }\n    \n    const handleItemSize = (item_size) => {\n        setSize(item_size)\n        setErrorMessage({ error: false, message: '' })\n    }\n    \n    const handleAddToCart = () => {\n        if (!color) {\n            setErrorMessage({ error: true, message: 'Select color of item' })\n            onClose()\n        }\n        if (!size) {\n            setErrorMessage({ error: true, message: 'Select size of item' })\n            onClose()\n        }\n        if (color && size) {\n            setErrorMessage({ error: false, message: '' })\n            dispatch(addProductToCart({\n                _id: uuidv4(),\n                name: name,\n                quantity: qty,\n                size: size,\n                price: price,\n                color: color,\n                images: item_images[color],\n                delivery: 1\n            }))\n            history.push('/cart')\n        }\n    }\n    \n    const handleShowCartItems = () => {\n        setShowCartItems(!showCartItems)\n    }\n    \n    const headerStyle = {\n        background: '#002b5c',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        color: 'white !important',\n        fontWeight: 'bolder'\n    }\n    \n    const bodyStyle = {\n        padding: '15px'\n    }\n    \n    const drawRowStyle = {\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        padding: '10px',\n        color: '#002b5c',\n        fontWeight: '600',\n        background: '#f7f7f7',\n        cursor: 'pointer',\n        marginTop: '10px'\n    }\n    \n    const drawColStyle = {\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        padding: '10px',\n        color: '#002b5c',\n        fontWeight: '600',\n        borderBottom: '1px solid #dcdcdc',\n        textTransform: 'uppercase'\n    }\n    \n    const buttonStyle = {\n        background: '#002b5c',\n        borderRadius: '0',\n        height: '40px',\n        fontWeight: '900',\n        border: '1px solid #002b5c',\n        textTransform: 'uppercase',\n    }\n    \n    return (\n        <>\n            <Drawer\n                title=\"Item added to Cart\"\n                placement=\"right\"\n                closable={true}\n                onClose={onClose}\n                visible={visible}\n                zIndex={10000000}\n                headerStyle={headerStyle}\n                bodyStyle={bodyStyle}\n            >\n                <Row>\n                    <Col md={5}>\n                        <Image src={color && item_images[color][0]} alt={'shirt'} fluid />\n                    </Col>\n\n                    <Col md={7}>\n                        <Row>\n                            <h5 className=\"draw-name\"> Harbor Fleece Shep Shirt </h5>\n                        </Row>\n                        <Row>\n                            <span className=\"draw-price\">${price.toFixed(2)}</span>\n                        </Row>\n                        <Row>\n                            <span className=\"draw-color\">{color && color}/{size && size}</span>\n                        </Row>\n                        <Row>\n                            <span className=\"draw-quantity\">Qty:{qty}</span>\n                        </Row>\n                    </Col>\n                </Row>\n\n                <Row style={drawRowStyle} onClick={handleShowCartItems}>\n                    {cartItems.length} Additional Items in Bag\n                    {showCartItems ? <i className=\"fas fa-minus\"></i> : <i className=\"fas fa-plus\"></i>}\n                </Row>\n\n                {showCartItems &&\n                    <Row>\n                        <ListGroup>\n                            {\n                                cartItems.map((item, i) => (\n                                    <ListGroup.Item key={i}>\n                                        <Row >\n                                            <Col md={3}>\n                                                <Image src={color && item.images[0]} alt={'shirt'} fluid />\n                                            </Col>\n\n                                            <Col md={7}>\n                                                <Row>\n                                                    <span className=\"name-field\">{item.name}</span>\n                                                </Row>\n                                                <Row>\n                                                    <span className=\"price-field\">${item.price.toFixed(2)}</span>\n                                                </Row>\n                                                <Row>\n                                                    <span className=\"color-field\">{item.color}/{item.size} </span>\n                                                </Row>\n                                                <Row>\n                                                    <span className=\"color-field\">Ship to me </span>\n                                                </Row>\n                                            </Col>\n                                        </Row>\n                                    </ListGroup.Item>\n                                ))\n                            }\n                        </ListGroup>\n                    </Row>\n                }\n\n                <Row>\n                    <Col style={drawColStyle} >\n                        <span>Cart Subtotal</span>\n                        <span>\n                            ${cartItems && cartItems.reduce((acc, item) => acc + item.quantity * item.price, 0).toFixed(2)}\n                        </span>\n                    </Col>\n                </Row>\n\n                <Row style={{ padding: '20px 20px 0px 20px', marginBottom: '8px' }}>\n                    <Button\n                        className='btn-block'\n                        type='button'\n                        onClick={handleAddToCart}\n                        style={buttonStyle}\n                    >\n                        CHECKOUT\n                    </Button>\n                </Row>\n\n                <Row style={{ padding: '0px 20px 0px 20px' }}>\n                    <Button\n                        className='btn-block'\n                        type='button'\n                        onClick={hideDrawer}\n                        style={{ background: 'white', color: '#002b5c', borderRadius: '0', height: '40px', fontWeight: '900', border: '1px solid #002b5c' }}\n                    >\n                        CONTINUE SHOPPING\n                    </Button>\n                </Row>\n            </Drawer>\n\n            <Row>\n                <Col md={6}>\n                    <Carousel touch={true}>\n                        {item_images[color ? color : 'red'].map((url, i) => (\n                            <Carousel.Item key={i}>\n                                <img\n                                    className=\"d-block w-100\"\n                                    src={url}\n                                    alt=\"First slide\"\n                                />\n                                <Carousel.Caption>\n                                </Carousel.Caption>\n                            </Carousel.Item>\n                        )\n                        )}\n                    </Carousel>\n\n                </Col>\n\n                <Col md={5}>\n                    {successMessage.success && <Message variant=\"success\">  {successMessage.message}</Message>}\n                    {errorMessage.error && <Message variant=\"danger\"> <i style={{ color: 'red' }} className=\"fas fa-times\"></i> {errorMessage.message}</Message>}\n                    <ListGroup variant='flush'>\n                        <ListGroup.Item>\n                            <h2> Harbor Fleece Shep Shirt </h2>\n                        </ListGroup.Item>\n                    </ListGroup>\n\n                    <ListGroup.Item>\n                        <Row className>\n                            <Rating value={4.5} text={'64 reviews'} color={'#1176bb'} />\n                        </Row>\n                    </ListGroup.Item>\n\n                    <Card>\n                        <ListGroup variant='flush'>\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>\n                                        <strong>${price.toFixed(2)}</strong>\n                                    </Col>\n                                </Row>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Row>\n                                    {colors.map((available_color, i) => (\n                                        <span key={i} onClick={() => handleColor(available_color)} className={color === available_color ? `color-button-selected ${available_color}` : `color-button ${available_color}`}></span>\n                                    ))}\n                                </Row>\n                                <Row> <span style={{ fontSize: '10px', color: '#1176bb' }}>color: {color}</span></Row>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Row className>\n                                    {sizes.map((product_size, i) => (\n                                        <span key={i} onClick={() => handleItemSize(product_size)} className={size === product_size ? \"size-button-selected\" : \"size-button\"}>{product_size}</span>\n                                    ))}\n                                </Row>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col className=\"stock\">\n                                        {'In Stock'}\n                                    </Col>\n                                </Row>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Row className>\n                                    <span className=\"decrease\" onClick={handleDecrease}> <i className=\"fas fa-minus\"></i> </span>\n                                    <input value={qty} onChange={handleInputField} className=\"item-number-input\"></input>\n                                    <span className=\"increase\" onClick={handleIncrease}> <i className=\"fas fa-plus\"></i></span>\n\n                                </Row>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Button\n                                className='btn-block'\n                                type='button'\n                                onClick={showDrawer}\n                                style={buttonStyle}\n                            >\n                                Add to Bag\n                            </Button>\n                            </ListGroup.Item>\n\n                        </ListGroup>\n                    </Card>\n\n                </Col>\n\n                <Col md={3}>\n                </Col>\n\n            </Row>\n\n            <Row className=\"details-section\">\n                <Col md={6}>\n                    <Row className=\"title\">The Details</Row>\n                    <Row className=\"details\">\n                        Our original fleece in our signature Shep Shirt style. Made from soft, recycled fabric this fleece will be your new go-to layer for the fall, winter and spring. (So, you might want to get a few.)\n                        Our original fleece in our signature Shep Shirt style. Made from soft, recycled fabric this fleece will be your new go-to layer for the fall, winter and spring. (So, you might want to get a few.)\n                    </Row>\n                </Col>\n\n                <Col md={4}>\n                </Col>\n            </Row>\n\n                    <Row>\n                        <Col md={6}>\n                            <h3>Reviews</h3>\n                            <ListGroup variant='flush'>\n                                {cartItems.map((review, i) => (\n                                    <ListGroup.Item key={i}>\n                                        <Rating value={4} color=\"#1176bb\" />\n                                        <p>I wasnt sure if this would be liked due to the material however it was immediately put on and loved!</p>\n                                    </ListGroup.Item>\n                                ))}\n\n                            </ListGroup>\n                        </Col>\n                    </Row>\n\n        </>\n    )\n}\n\nexport default ProductDetails\n","/Users/johncoleman/Documents/Projects/React-Redux/product_page/src/components/Rating.js",[],"/Users/johncoleman/Documents/Projects/React-Redux/product_page/src/components/Header.js",[],"/Users/johncoleman/Documents/Projects/React-Redux/product_page/src/screens/CartScreen.js",[],"/Users/johncoleman/Documents/Projects/React-Redux/product_page/src/store.js",[],"/Users/johncoleman/Documents/Projects/React-Redux/product_page/src/actions/productAction.js",[],"/Users/johncoleman/Documents/Projects/React-Redux/product_page/src/constants/productContants.js",[],"/Users/johncoleman/Documents/Projects/React-Redux/product_page/src/components/Message.js",[],"/Users/johncoleman/Documents/Projects/React-Redux/product_page/src/reducers/productReducers.js",["72","73"],"/Users/johncoleman/Documents/Projects/React-Redux/product_page/src/images.js",[],"/Users/johncoleman/Documents/Projects/React-Redux/product_page/src/screens/EditScreen.js",["74","75","76"],"import React, { useState, useEffect } from 'react'\nimport Rating from '../components/Rating'\nimport { Link } from 'react-router-dom'\nimport { Row, Col, Image, ListGroup, Card, Button, Carousel } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { addProductToCart, editProductInCart } from '../actions/productAction'\nimport Message from '../components/Message'\nimport { Drawer } from 'antd';\nimport { v4 as uuidv4 } from 'uuid';\nimport item_images from '../images'\n\nconst EditScreen = ({ history, location, match }) => {\n    const dispatch = useDispatch()\n    const [name, setName] = useState('Harbor Fleece Shep Shirt')\n    const [price, setPrice] = useState(138)\n    const [qty, setQty] = useState(1)\n    const [color, setColor] = useState()\n    const [size, setSize] = useState()\n    const [visible, setVisible] = useState(false);\n    const [errorMessage, setErrorMessage] = useState({ error: false, message: '' })\n    const [successMessage, setSuccessMessage] = useState({ success: false, message: '' })\n    const [showCartItems, setShowCartItems] = useState(false)\n    const [status, setStatus] = useState(false)\n    const [delivery, setDelivery] = useState()\n\n    const cart = useSelector(state => state.addToCart)\n    const { cartItems } = cart\n\n    const setEditInfo = (item) => {\n        setStatus(true)\n        setName(item.name)\n        setPrice(item.price)\n        setQty(item.quantity)\n        setColor(item.color)\n        setSize(item.size)\n        setDelivery(item.delivery)\n    }\n    useEffect(() => {\n        if (location.pathname = '/edit') {\n            let id = match.params.id\n            cartItems.map(item => item._id === id ?\n                setEditInfo(item) : item\n            )\n        }\n    }, [location])\n\n    const colors = ['red', 'yellow', 'green', 'blue', 'white']\n    const sizes = ['XS', 'S', 'M', 'L', 'XL', 'XXL']\n\n    const onClose = () => {\n        setVisible(false);\n    };\n\n    const showDrawer = () => {\n        if (!color) {\n            setErrorMessage({ error: true, message: 'Select color of item' })\n            onClose()\n        }\n        if (!size) {\n            setErrorMessage({ error: true, message: 'Select size of item' })\n            onClose()\n        }\n        if (qty <= 0) {\n            setErrorMessage({ error: true, message: 'Item quantity cannot be 0' })\n            onClose()\n        }\n        if (color && size && qty > 0) {\n            setVisible(true);\n            setErrorMessage({ error: false, message: '' })\n        }\n    };\n    const hideDrawer = () => {\n        setVisible(false)\n    }\n\n    const handleInputField = (e) => {\n        let code = /^[0-9]*$/i\n        if (e.target.value.match(code)) {\n            setQty(Number(e.target.value))\n        }\n\n    }\n\n    const handleIncrease = (e) => {\n        setQty(qty + 1)\n    }\n\n    const handleDecrease = (e) => {\n        if (qty > 1) {\n            setQty(qty - 1)\n        }\n    }\n\n    const handleColor = (selected_color) => {\n        setColor(selected_color)\n        setErrorMessage({ error: false, message: '' })\n    }\n\n    const handleItemSize = (item_size) => {\n        setSize(item_size)\n        setErrorMessage({ error: false, message: '' })\n    }\n\n    const handleAddToCart = () => {\n        if (!color) {\n            setErrorMessage({ error: true, message: 'Select color of item' })\n            onClose()\n        }\n        if (!size) {\n            setErrorMessage({ error: true, message: 'Select size of item' })\n            onClose()\n        }\n        if (color && size) {\n            setErrorMessage({ error: false, message: '' })\n            dispatch(addProductToCart({\n                _id: uuidv4(),\n                name: name,\n                quantity: qty,\n                size: size,\n                price: price,\n                color: color,\n                images: item_images[color]\n            }))\n            history.push('/cart')\n        }\n    }\n\n    const handleEditItem = () => {\n        dispatch(editProductInCart({\n            _id: match.params.id,\n            name: name,\n            quantity: qty,\n            size: size,\n            price: price,\n            color: color,\n            images: item_images[color],\n            delivery: delivery\n        }))\n        setSuccessMessage({ success: true, message: 'Item edited successfully' })\n\n        setTimeout(()=> {\n            history.push('/cart')\n        }, 3000)\n    }\n\n    const handleShowCartItems = () => {\n        setShowCartItems(!showCartItems)\n    }\n\n    const headerStyle = {\n        background: '#002b5c',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        color: 'white !important',\n        fontWeight: 'bolder'\n    }\n\n    const bodyStyle = {\n        padding: '15px'\n    }\n\n    const drawRowStyle = {\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        padding: '10px',\n        color: '#002b5c',\n        fontWeight: '600',\n        background: '#f7f7f7',\n        cursor: 'pointer',\n        marginTop: '10px'\n    }\n\n    const drawColStyle = {\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        padding: '10px',\n        color: '#002b5c',\n        fontWeight: '600',\n        borderBottom: '1px solid #dcdcdc',\n        textTransform: 'uppercase'\n    }\n\n    const buttonStyle = {\n        background: '#002b5c',\n        borderRadius: '0',\n        height: '40px',\n        fontWeight: '900',\n        border: '1px solid #002b5c',\n        textTransform: 'uppercase',\n    }\n\n    return (\n        <>\n            <Drawer\n                title=\"Item added to Cart\"\n                placement=\"right\"\n                closable={true}\n                onClose={onClose}\n                visible={visible}\n                zIndex={10000000}\n                headerStyle={headerStyle}\n                bodyStyle={bodyStyle}\n            >\n                <Row>\n                    <Col md={5}>\n                        <Image src={color && item_images[color][0]} alt={'shirt'} fluid />\n                    </Col>\n\n                    <Col md={7}>\n                        <Row>\n                            <h5 className=\"draw-name\"> Harbor Fleece Shep Shirt </h5>\n                        </Row>\n                        <Row>\n                            <span className=\"draw-price\">${price.toFixed(2)}</span>\n                        </Row>\n                        <Row>\n                            <span className=\"draw-color\">{color && color}/{size && size}</span>\n                        </Row>\n                        <Row>\n                            <span className=\"draw-quantity\">Qty:{qty}</span>\n                        </Row>\n\n                    </Col>\n                </Row>\n\n                <Row style={drawRowStyle} onClick={handleShowCartItems}>\n                    {cartItems.length} Additional Items in Bag\n                    {showCartItems ? <i className=\"fas fa-minus\"></i> : <i className=\"fas fa-plus\"></i>}\n                </Row>\n\n                {showCartItems &&\n                    <Row>\n                        <ListGroup>\n                            {\n                                cartItems.map((item, i) => (\n                                    <ListGroup.Item key={i}>\n                                        <Row >\n                                            <Col md={3}>\n                                                <Image src={color && item.images[0]} alt={'shirt'} fluid />\n                                            </Col>\n\n                                            <Col md={7}>\n                                                <Row>\n                                                    <span className=\"name-field\">{item.name}</span>\n                                                </Row>\n                                                <Row>\n                                                    <span className=\"price-field\">${item.price.toFixed(2)}</span>\n                                                </Row>\n                                                <Row>\n                                                    <span className=\"color-field\">{item.color}/{item.size} </span>\n                                                </Row>\n                                                <Row>\n                                                    <span className=\"color-field\">Ship to me </span>\n                                                </Row>\n                                            </Col>\n                                        </Row>\n                                    </ListGroup.Item>\n                                ))\n                            }\n                        </ListGroup>\n                    </Row>\n                }\n\n                <Row>\n                    <Col style={drawColStyle} >\n                        <span>Cart Subtotal</span>\n                        <span>\n                            ${cartItems && cartItems.reduce((acc, item) => acc + item.quantity * item.price, 0).toFixed(2)}\n                        </span>\n                    </Col>\n                </Row>\n\n                <Row style={{ padding: '20px 20px 0px 20px', marginBottom: '8px' }}>\n                    <Button\n                        className='btn-block'\n                        type='button'\n                        onClick={handleAddToCart}\n                        style={buttonStyle}\n                    >\n                        CHECKOUT\n                    </Button>\n                </Row>\n\n                <Row style={{ padding: '0px 20px 0px 20px' }}>\n                    <Button\n                        className='btn-block'\n                        type='button'\n                        onClick={hideDrawer}\n                        style={{ background: 'white', color: '#002b5c', borderRadius: '0', height: '40px', fontWeight: '900', border: '1px solid #002b5c' }}\n                    >\n                        CONTINUE SHOPPING\n                    </Button>\n                </Row>\n            </Drawer>\n\n            <Message>Back to <Link to='/cart'>Cart</Link></Message>\n            {status ? \n            <Row>\n                <Col md={6}>\n                    <Carousel touch={true}>\n                        {item_images[color ? color : 'red'].map((url, i) => (\n                            <Carousel.Item key={i}>\n                                <img\n                                    className=\"d-block w-100\"\n                                    src={url}\n                                    alt=\"First slide\"\n                                />\n                                <Carousel.Caption>\n                                </Carousel.Caption>\n                            </Carousel.Item>\n                        )\n                        )}\n                    </Carousel>\n\n                </Col>\n\n                <Col md={5}>\n                    {successMessage.success && <Message variant=\"success\">  {successMessage.message}</Message>}\n                    {errorMessage.error && <Message variant=\"danger\"> <i style={{ color: 'red' }} className=\"fas fa-times\"></i> {errorMessage.message}</Message>}\n                    <ListGroup variant='flush'>\n                        <ListGroup.Item>\n                            <h2> Harbor Fleece Shep Shirt </h2>\n                        </ListGroup.Item>\n                    </ListGroup>\n\n                    <ListGroup.Item>\n                        <Row className>\n                            <Rating value={4.5} text={'64 reviews'} color={'#1176bb'} />\n                        </Row>\n                    </ListGroup.Item>\n\n                    <Card>\n                        <ListGroup variant='flush'>\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>\n                                        <strong>${price.toFixed(2)}</strong>\n                                    </Col>\n                                </Row>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Row>\n                                    {colors.map((available_color, i) => (\n                                        <span key={i} onClick={() => handleColor(available_color)} className={color === available_color ? `color-button-selected ${available_color}` : `color-button ${available_color}`}></span>\n                                    ))}\n                                </Row>\n                                <Row> <span style={{ fontSize: '10px', color: '#1176bb' }}>color: {color}</span></Row>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Row className>\n                                    {sizes.map((product_size, i) => (\n                                        <span key={i} onClick={() => handleItemSize(product_size)} className={size === product_size ? \"size-button-selected\" : \"size-button\"}>{product_size}</span>\n                                    ))}\n                                </Row>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col className=\"stock\">\n                                        {'In Stock'}\n                                    </Col>\n                                </Row>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Row className>\n                                    <span className=\"decrease\" onClick={handleDecrease}> <i className=\"fas fa-minus\"></i> </span>\n                                    <input value={qty} onChange={handleInputField} className=\"item-number-input\"></input>\n                                    <span className=\"increase\" onClick={handleIncrease}> <i className=\"fas fa-plus\"></i></span>\n\n                                </Row>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                    <Button\n                                        className='btn-block'\n                                        type='button'\n                                        onClick={handleEditItem}\n                                        style={buttonStyle}\n                                    >\n                                        Update\n                                </Button>\n                            </ListGroup.Item>\n\n                        </ListGroup>\n                    </Card>\n\n                </Col>\n\n                <Col md={3}>\n                </Col>\n\n            </Row>\n            : \n            <Message>Item not found</Message>\n            }\n\n        </>\n    )\n}\n\nexport default EditScreen\n","/Users/johncoleman/Documents/Projects/React-Redux/product_page/src/screens/CheckoutScreen.js",["77","78","79","80","81","82","83","84","85","86","87","88","89","90","91"],"import React, { useState } from 'react'\nimport { Row, Col, Image, ListGroup, Card, Button, Form } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Radio, Input } from 'antd';\nimport Message from '../components/Message'\nimport { editProductInCart, deleteCartItem, applyCoupon } from '../actions/productAction'\n\nconst CheckoutScreen = () => {\n    const dispatch = useDispatch()\n\n    const cart = useSelector(state => state.addToCart)\n    const { cartItems, coupon: available_coupon } = cart\n\n    const [coupon, setCoupon] = useState('')\n    const [value, setValue] = useState(1);\n\n    const count = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    const onChange = (e, item) => {\n        setValue(e.target.value)\n        dispatch(editProductInCart({\n            ...item, delivery: e.target.value\n        }))\n    };\n\n    const handleQuantity = (quantity, item) => {\n        dispatch(editProductInCart({\n            ...item, quantity: quantity\n        }))\n    }\n\n    const handleDelivery = (delivery, item) => {\n    }\n\n    const handleDelete = (id) => {\n        dispatch(deleteCartItem({ id }))\n    }\n\n    const handleCouponInput = (e) => {\n        let code = /^[a-z0-9]*$/i\n        if (e.target.value.match(code)) {\n            setCoupon(e.target.value)\n        }\n    }\n\n    const handleApplyCoupon = (coupon_number) => {\n        dispatch(applyCoupon(coupon_number))\n    }\n\n    const radioStyle = {\n        display: 'block',\n        height: '20px',\n        lineHeight: '20px',\n        fontSize: '11px',\n        fontWeight: 'bolder',\n    };\n\n    const buttonStyle = {\n        background: '#002b5c',\n        borderRadius: '0',\n        height: '40px',\n        fontWeight: '900',\n        border: '1px solid #002b5c',\n        textTransform: 'uppercase',\n    }\n\n    const buttonStyleApply = {\n        background: '#002b5c',\n        borderRadius: '0',\n        fontSize: '10px',\n        fontWeight: '900',\n        border: '1px solid #002b5c',\n    }\n\n    const buttonStyleRed = {\n        background: '#d63855',\n        borderRadius: '0',\n        height: '40px',\n        fontWeight: '900',\n        border: '1px solid #d63855',\n        textTransform: 'uppercase',\n        width:'200px'\n    }\n\n    const buttonStyleSeaBlue = {\n        background: '#1176bb',\n        borderRadius: '0',\n        height: '40px',\n        fontWeight: '900',\n        border: '1px solid #1176bb',\n        textTransform: 'uppercase',\n    }\n\n    const headerStyle = {\n        textTransform: 'uppercase',\n        fontSize: '12px',\n        fontWeight: '600'\n    }\n\n    return (\n        <>\n            <h1 style={{ color: '#002b5c' }}> {`Ship to You ${cartItems.reduce((acc, item) => acc + item.quantity, 0)} Item(s)`} </h1>\n            {cartItems && cartItems.length === 0 ?\n                <Message>Your cart is empty <Link to='/'>Go Back</Link></Message>\n                :\n                (<>\n                    <Row>\n                        <Col md={6}>\n                            <Row>\n                                <Col md={5}>\n                                    First Name\n                                    <Input placeholder={\"Enter coupon code\"} type=\"text\" value={coupon} onChange={handleCouponInput} style={{ width: '100%', height: '50px', marginLeft: 10 }} />\n                                </Col>\n                                <Col md={5}>\n                                    Last Name\n                                <Input placeholder={\"Enter coupon code\"} type=\"text\" value={coupon} onChange={handleCouponInput} style={{ width: '100%', height: '50px', marginLeft: 10 }} />\n                                </Col>\n                            </Row>\n\n                            <Row style={{ marginTop: '25px' }}>\n                                <Col md={10}>\n                                    Address\n                                    <Input placeholder={\"Enter coupon code\"} type=\"text\" value={coupon} onChange={handleCouponInput} style={{ width: '100%', height: '50px', marginLeft: 10 }} />\n                                </Col>\n                            </Row>\n\n                            <Row style={{ marginTop: '25px' }}>\n                                <Col md={10}>\n                                    <Input placeholder={\"Enter coupon code\"} type=\"text\" value={coupon} onChange={handleCouponInput} style={{ width: '100%', height: '50px', marginLeft: 10 }} />\n                                </Col>\n                            </Row>\n\n                            <Row style={{ marginTop: '25px' }}>\n                                <Col md={5}>\n                                    Phone\n                                    <Input placeholder={\"Enter coupon code\"} type=\"number\" value={coupon} onChange={handleCouponInput} style={{ width: '100%', height: '50px', marginLeft: 10 }} />\n                                </Col>\n                                <Col md={5}>\n                                    Zip Code\n                                <Input placeholder={\"Enter coupon code\"} type=\"number\" value={coupon} onChange={handleCouponInput} style={{ width: '100%', height: '50px', marginLeft: 10 }} />\n                                </Col>\n                            </Row>\n\n                        </Col>\n\n                        <Col md={4}>\n                            <Card>\n                                <ListGroup variant='flush'>\n                                    <ListGroup.Item style={{ background: '#002b5c', color: 'white', fontWeight: '900' }}>\n                                        <Col>\n                                            <Row style={{display:'flex', justifyContent:'space-between', alignItems:'center'}}>\n                                                <h3 style={{ color: 'white' }}> Order Summary</h3>\n                                                <Link to='/cart' className=\"edit-button\">\n                                                    <span><i className=\"fas fa-suitcase\" style={{ color: '#002b5c' }}></i></span>\n                                                    <span>Edit</span>\n                                                </Link>\n                                            </Row>\n                                            <Row>\n                                                {cartItems && cartItems.reduce((acc, item) => acc + item.quantity, 0)} items\n                                            </Row>\n                                        </Col>\n\n                                    </ListGroup.Item>\n\n                                    <ListGroup.Item>\n                                        <Row>\n                                            <Col>\n                                                Subtotal\n                                            </Col>\n                                            <Col>\n                                                <>\n                                                    <span className={\"price\"}>\n                                                        ${!available_coupon ? cartItems.reduce((acc, item) => acc + item.quantity * item.price, 0).toFixed(2) : cartItems.reduce((acc, item) => acc + item.quantity * item.price/2, 0).toFixed(2) }\n                                                    </span>\n                                                </>\n                                            </Col>\n                                        </Row>\n                                    </ListGroup.Item>\n\n                                    <ListGroup.Item>\n                                        <Row>\n                                            <Col>\n                                                Shipping & Handling:\n                                            </Col>\n                                            <Col>\n                                                <>\n                                                    <span className={\"price\"}>\n                                                        $14.00\n                                                        </span>\n                                                </>\n                                            </Col>\n                                        </Row>\n                                    </ListGroup.Item>\n\n                                    <ListGroup.Item>\n                                        <Row>\n                                            <Col style={{ color: '#d63855' }}>\n                                                Shipping Discount\n                                            </Col>\n                                            <Col>\n                                                <>\n                                                    <span className={\"price\"}>\n                                                        -$14.00\n                                                        </span>\n                                                </>\n                                            </Col>\n                                        </Row>\n                                    </ListGroup.Item>\n\n                                    <ListGroup.Item>\n                                        <Row>\n                                            <Col style={{ color: '#d63855' }}>\n                                                TOTAL\n                                            </Col>\n                                            <Col>\n                                                <>\n                                                    <span className={\"price\"}>\n                                                    ${!available_coupon ? cartItems.reduce((acc, item) => acc + item.quantity * item.price, 0).toFixed(2) : cartItems.reduce((acc, item) => acc + item.quantity * item.price/2, 0).toFixed(2) }\n                                                    </span>\n                                                </>\n                                            </Col>\n                                        </Row>\n                                    </ListGroup.Item>\n\n                                </ListGroup>\n                            </Card>\n\n                        </Col>\n                    </Row>\n                    <Row style={{marginTop:'50px', display:'flex', justifyContent:'center', alignItems:'center'}}>\n                            <Button style={buttonStyleRed} type='button' className='btn-block' /*disabled={cartItems.lenght === 0} onClick={checkoutHandler}*/>\n                                Next: Payment\n                            </Button>\n\n                    </Row>\n                </>\n                )\n            }\n        </>\n    )\n}\n\nexport default CheckoutScreen\n",{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":1,"column":27,"nodeType":"98","messageId":"99","endLine":1,"endColumn":36},{"ruleId":"96","severity":1,"message":"100","line":5,"column":28,"nodeType":"98","messageId":"99","endLine":5,"endColumn":45},{"ruleId":"96","severity":1,"message":"101","line":24,"column":28,"nodeType":"98","messageId":"99","endLine":24,"endColumn":45},{"ruleId":"96","severity":1,"message":"102","line":31,"column":11,"nodeType":"98","messageId":"99","endLine":31,"endColumn":22},{"ruleId":"96","severity":1,"message":"103","line":6,"column":9,"nodeType":"98","messageId":"99","endLine":6,"endColumn":26},{"ruleId":"104","severity":1,"message":"105","line":24,"column":56,"nodeType":"106","messageId":"107","endLine":27,"endColumn":26},{"ruleId":"108","severity":1,"message":"109","line":39,"column":13,"nodeType":"110","messageId":"111","endLine":39,"endColumn":40},{"ruleId":"112","severity":1,"message":"113","line":45,"column":8,"nodeType":"114","endLine":45,"endColumn":18,"suggestions":"115"},{"ruleId":"96","severity":1,"message":"116","line":54,"column":11,"nodeType":"98","messageId":"99","endLine":54,"endColumn":21},{"ruleId":"96","severity":1,"message":"117","line":2,"column":20,"nodeType":"98","messageId":"99","endLine":2,"endColumn":25},{"ruleId":"96","severity":1,"message":"118","line":2,"column":52,"nodeType":"98","messageId":"99","endLine":2,"endColumn":56},{"ruleId":"96","severity":1,"message":"119","line":5,"column":10,"nodeType":"98","messageId":"99","endLine":5,"endColumn":15},{"ruleId":"96","severity":1,"message":"120","line":16,"column":12,"nodeType":"98","messageId":"99","endLine":16,"endColumn":17},{"ruleId":"96","severity":1,"message":"121","line":18,"column":11,"nodeType":"98","messageId":"99","endLine":18,"endColumn":16},{"ruleId":"96","severity":1,"message":"122","line":20,"column":11,"nodeType":"98","messageId":"99","endLine":20,"endColumn":19},{"ruleId":"96","severity":1,"message":"123","line":27,"column":11,"nodeType":"98","messageId":"99","endLine":27,"endColumn":25},{"ruleId":"96","severity":1,"message":"124","line":33,"column":11,"nodeType":"98","messageId":"99","endLine":33,"endColumn":25},{"ruleId":"96","severity":1,"message":"125","line":36,"column":11,"nodeType":"98","messageId":"99","endLine":36,"endColumn":23},{"ruleId":"96","severity":1,"message":"126","line":47,"column":11,"nodeType":"98","messageId":"99","endLine":47,"endColumn":28},{"ruleId":"96","severity":1,"message":"127","line":51,"column":11,"nodeType":"98","messageId":"99","endLine":51,"endColumn":21},{"ruleId":"96","severity":1,"message":"128","line":59,"column":11,"nodeType":"98","messageId":"99","endLine":59,"endColumn":22},{"ruleId":"96","severity":1,"message":"129","line":68,"column":11,"nodeType":"98","messageId":"99","endLine":68,"endColumn":27},{"ruleId":"96","severity":1,"message":"130","line":86,"column":11,"nodeType":"98","messageId":"99","endLine":86,"endColumn":29},{"ruleId":"96","severity":1,"message":"131","line":95,"column":11,"nodeType":"98","messageId":"99","endLine":95,"endColumn":22},"no-native-reassign",["132"],"no-negated-in-lhs",["133"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'editProductInCart' is defined but never used.","'setSuccessMessage' is assigned a value but never used.","'setEditInfo' is assigned a value but never used.","'newItemProperties' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'state', 'i', 'state', 'i', 'state', 'i'.","ArrowFunctionExpression","unsafeRefs","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'cartItems' and 'match.params.id'. Either include them or remove the dependency array.","ArrayExpression",["134"],"'showDrawer' is assigned a value but never used.","'Image' is defined but never used.","'Form' is defined but never used.","'Radio' is defined but never used.","'value' is assigned a value but never used.","'count' is assigned a value but never used.","'onChange' is assigned a value but never used.","'handleQuantity' is assigned a value but never used.","'handleDelivery' is assigned a value but never used.","'handleDelete' is assigned a value but never used.","'handleApplyCoupon' is assigned a value but never used.","'radioStyle' is assigned a value but never used.","'buttonStyle' is assigned a value but never used.","'buttonStyleApply' is assigned a value but never used.","'buttonStyleSeaBlue' is assigned a value but never used.","'headerStyle' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"135","fix":"136"},"Update the dependencies array to be: [cartItems, location, match.params.id]",{"range":"137","text":"138"},[1757,1767],"[cartItems, location, match.params.id]"]